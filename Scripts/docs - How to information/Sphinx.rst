
Sphinx
======

ReadTheDocs
-----------
http://read-the-docs.readthedocs.org/

This readthedocs getting started will walk you through the basics of getting started with Sphinx- http://read-the-docs.readthedocs.org/en/latest/getting_started.html

Read the Docs hosts documentation, making it fully searchable and easy to find. You can import your docs using any major version control system, including Mercurial, Git, Subversion, and Bazaar. We support webhooks so your docs get built when you commit code. There's also support for versioning so you can build docs from tags and branches of your code in your repository. A full list of features is available.

Installing sphinx and publishing modules and packages
-----------------------------------------------------
http://sphinx-doc.org/
Sphinx is a tool that makes it easy to create intelligent and beautiful documentation. It has excellent facilities for the documentation of Python projects.  Extensions include automatic testing of code snippets, inclusion of docstrings from Python modules.


Install sphinx
^^^^^^^^^^^^^^

| C:/python -m pip install Sphinx
| 

Create a Python module
^^^^^^^^^^^^^^^^^^^^^^
For example:
    | mymodule.py
    | """
    | This is mymodule module test file
    | ==================================
    |
    | """

    | def main():
    |     '''Script to be run on start up'''
    |     print dir()
        
    | def myFunction():
    |     '''This is my function'''
    |     import sys
    |     print sys.path
    | 
    | if __name__ == '__main__':
    |     main()
    | 

Create a sphinx Documentation site
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

#. cd C:/pathtomodule/>
#. mkdir docs
#. cd docs
#. sphinx-quickstart  - use default options, except autodoc, set this to yes. You will also be prompted for a project name and version.

Note, sometimes sphinx-quickstart is not found on the path - run the following to include it:

| set PATH=%PATH%;C:/Python27/Lib/site-packages/sphinx 
| 

This will generate an index.rst, conf.py among other files.

Add your own documentation files to  your Sphinx Documentation site
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Open the index.rst file 
You can edit this file to include documentation files which are not modules/packages, for example, a myintrofile.rst file. This is added like this:

| Contents:
| 
| .. toctree::
|   :maxdepth: 2
| 
|    myintrofile
| 

Where myintrofile.rst would be a sphinx formatted file containing text or links for the side menu.

Note, as we will be using the readthedocs "theme" for the layout, you must add all links to the index.rst file for it to appear on the side menu. Other themes would automatically add modules to the side menu.

Include your modules and packages into your Sphinx Documentation site
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
To include your modules' documentation into the Sphinx documentation, edit the conf.py file and uncomment the following:

#. In conf.py, set the sys.path to include the path to your py modules:

    | # If extensions (or modules to document with autodoc) are in another directory,
    | # add these directories to sys.path here. If the directory is relative to the
    | # documentation root, use os.path.abspath to make it absolute, like shown here.
    | sys.path.insert(0, os.path.abspath('..'))    #note this sets the path to the modules to be the level above the docs folder.
    | #or
    | #sys.path.insert(0, os.path.abspath('../..')) # used in the example for importing an entire package which is 2 levels above doc, rather than the individual modules.
    | 
    
#. Include sphinx.ext.autodoc to the extensions list.
    | # Add any Sphinx extension module names here, as strings. They can be
    | # extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
    | # ones.
    | extensions = [
    |     'sphinx.ext.autodoc',
    | ]
    | 
    
#. 
    | # If false, no module index is generated.
    | html_domain_indices = True
    | 
    
#.
    | # If false, no module index is generated.
    | texinfo_domain_indices = True
    | 
  
Generate an rst file for each Package or Module
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Next, to include your module in the documentation, you need to generate an rst file for each module, or package, and also generate a modules.rst file.  

This can be autogenerated, using:

#. C:/.../scripts> sphinx-apidoc -o docs .     #This is the level where the package or modules are contained.
#. C:/.../OtherModules> sphinx-apidoc -o ../Scripts/docs .     #This is the level where the package or modules are contained.

    This has generated an rst file per package,plus a modules.rst file in your docs folder.

#. If you run this from more than one folder, then the modules.rst will have only been updated for the first package.
    Edit the modules.rst, and add the additional packages or modules.

    | .
    | =
    | 
    | .. toctree::
    |    :maxdepth: 4
    | 
    |    Scripts
    |    OtherModules

#. Once this has been run, the and the rst files exist, the process will not overwrite them. You will need to edit the files manually or remove them to regenerate them.

Setting a theme for your documentation site
-------------------------------------------

Set the theme template to match the sphinx documentation

#. You will also need to download the 'sphinx_rtd_theme' folder and place it into your docs folder.  For example from here: https://github.com/snide/sphinx_rtd_theme

    Copy the 'sphinx_rtd_theme' folder into your top level folder where your packages or modules are contained, for example:
    C:/Projects/RepSuite/Releases/4.3/Forgetdata/Libraries/Lib/forgetdata/sphinx_rtd_theme

    This folder contains a theme.conf and a number of .html files.

#. In conf.py, update the following:

    | # -- Options for HTML output ----------------------------------------------
    | 
    | # The theme to use for HTML and HTML Help pages.  See the documentation for
    | # a list of builtin themes.
    | #html_theme = 'default'
    | # on_rtd is whether we are on readthedocs.org
    | on_rtd = os.environ.get('READTHEDOCS', None) == 'True'
    | 
    | if not on_rtd:  # only import and set the theme if we're building docs locally
    |     
    |     import sphinx_rtd_theme
    |     html_theme = 'sphinx_rtd_theme'
    |     html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]

    | # otherwise, readthedocs.org uses their theme by default, so no need to specify it

Update the Sphinx Documentation Site
------------------------------------

Run the following batch script:
| cd docs
| c:/.../docs>make html
| 

This generates a number of folders and files. To see your documentation open: 
| C:/.../docs/_build/html/index.html 
|

Note, if you include a package rather than an individual module, then then entire package is imported to documentation as one.

Note: sometimes, "make html" cannot find sphinx-build, if you want to run it using sphinx-build, you can do so using:
sphinx-build -b html src_folder doc_folder   where src_folder and doc_folder cannot be the same folder.
 
For more info on getting started with sphinx and all of the options for creating documentation files, see http://sphinx-doc.org, and for getting started: http://sphinx-doc.org/tutorial.html

NOTE: you can rerun "make html" whenever a change has been made.

Add the packages and modules to the Table Of Contents page
----------------------------------------------------------

Adding the modules and packages to the Table of Contents page in index.html.
NOTE: If you are using the sphinx_rtd_theme template, then the sidebar/Table of contents needs to be set up manually to include the modules, if required.

#. Edit the modules.rst and update the following:

    | .
    | =

    and include a title to appear in the Table of Contents, for example, if your Packages are called Scripts and OtherModules:

    | Packages And Modules
    | ====================

    | .. toctree::
    |    :maxdepth: 4

    |    Scripts
    |    OtherModules
    | 
        
#. Edit the index.rst and include the modules.rst file, for example:
#. Also update the maxdepth setting to 3.


    | Contents:
    | 
    | .. toctree::
    |    :maxdepth: 3
    |    
    |    myintrofile
    |    modules
    | 
    
#. Re-run the "make html" and the sidebar will have been updated.


Add sphinx readable documentation comments to your modules and packages 
=======================================================================
Make sure that comments within your modules are suitable to be read by Sphinx.  
Guidelines are here:  http://sphinx-doc.org/rest.html


Making a setuptools setup for your module, eg mymodule.py
=========================================================
Setuptools is a package development process library designed to facilitate packaging Python projects by enhancing the Python standard library distutils (distribution utilities). 
It includes: Python package and module definitions. Distribution package metadata. Test hooks.

Easy Install is a python module (easy_install) bundled with setuptools that lets you automatically download, build, install, and manage Python packages.

https://pypi.python.org/pypi/setuptools
http://pythonhosted.org//setuptools/
https://pythonhosted.org/setuptools/easy_install.html#using-easy-install

Full Setup Tools dos here:
http://peak.telecommunity.com/DevCenter/setuptools

  

Using Python 3
--------------
Note, by default this will support Python2.*, if you require Python3 support, you will need to run a script on the code, which can be set up as a parameter, use_2to3 = True.  See http://pythonhosted.org//setuptools/python3.html for more information.
 
Installing EasyInstall
----------------------

i. To install, run:
pip install ez_setup

* TODO:  look into this more!!   THIS SECTION IS NOT COMPLETE

Module distribution - Installing your module at a clientsite using python setup.py file
---------------------------------------------------------------------------------------

https://docs.python.org/2/distutils/introduction.html 

Instructions to make the zip file for distribution
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

#. Create a setup.py containing your module names:

    from distutils.core import setup
    setup(name='AutoCreatePresentation_tabsml',
        version='1.0',
        py_modules=['myModuleName','anotherModuleName']
        )

#.  Generate the zip file by typing:
    python setup.py sdist   (TODO This is a source distribution, should use dist?)
   
    This will create a folder called dist which will contain a zip file called myModuleName-1.0.zip

    Send this file to your customer.
    
Instructions to install the module at the client site
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#. unzip the pdistribution file onto the local machine.

If running Python:
#. run:
    python setup.py install
    
    This will install the module into your Python install site-package folder ( the appropriate directory for third-party modules in their Python installation)
    
If running Iron Python, you install it using:
>ipy setup.py install 

and then you can run the installed modules from the command prompt.

* TODO _ installing a package
* TODO INstalling and making egg files
* TODO installing additional files.
* TODO including additional dependencies in setup.py.



OTHER SPHINX THINGS TO DO:
==========================
* DONE -  review transformations scripts, and turn repeated scripts into a class or one function with parameters.
* DONE -  Make the documentation of Scripts testable automatically.  write guidelines on this
* TODO: Find out about testing other script snippets.  write guidelines on this
* TODO: How to add in other text for documentation (porting the forgetdata.com/documentation), and make it testable.
* TODO: adding modules and packages to docs.
* DONE: find out about adding classes vs packages / modules to docs.
* TODO: How to cross reference material on Sphinx. - see https://github.com/numpy/numpy/blob/master/doc/example.py ``var`` will reference existing documentation.
    eg The :py:func:`GetPptImageSize` can be used for...
    http://sphinx-doc.org/domains.html#cross-referencing-syntax
    http://sphinx-doc.org/domains.html#cross-referencing-python-objects
    
    

* TODO: How to upload to documentation to readthedocs.
* TODO: Releasing modules (including docs) using setup tools
* TODO: General guidlines on using sphinx for our docs.
* TODO Turn this page into appropriate documentation for getting started with using Python for docs.


* TODO: How to add documentation from multiple sources into one doc site on readthedocs.. eg scripts/api/faqs



* TODO Other implementations for Python can be found here: 
    IronPython, PyPy, WinPython, etc - https://www.python.org/download/alternatives
    IPython - http://ipython.org/
    Pandas - http://pandas.pydata.org/index.html

TODO? installing python modules:
https://docs.python.org/2/install/#inst-alt-install

TODO: 
See  style guide - http://legacy.python.org/dev/peps/pep-0008/ 
 
Please install these things:
https://www.python.org/download/releases/2.7/
http://sourceforge.net/projects/pywin32/files/pywin32/Build%20219/pywin32-219.win32-py2.7.exe/download
Then do at command prompt:
Pip install numpy
Pip install ipython
Pip install nose
PyDev (packaged python in eclipse) easiest way is :http://brainwy.github.io/liclipse/download.html#windows you might need to install a java runtime first